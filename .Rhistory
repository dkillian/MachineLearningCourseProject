?gendist
Ys
set.seed(43)
Y0 <- round(rnorm(6,10,2),0)
Y1 <- round(rnorm(6,20,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
Y0 <- c(10,7,9,11,8,9)
Y1 <- c(22,20,17,10,29,15)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(Y0,Y1)
colMeans(Ys)
Z <- c(rep(1,3),rep(0,3))
Z
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,20,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
Y1 <- round(rnorm(10,16,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
Y1 <- round(rnorm(10,17,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
Z <- c(rep(1,5),rep(0,5))
z
z <- c(rep(1,5),rep(0,5))
z
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,17,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
treatment <- c(rep(0,10), rep(1,10))
treatment
outcome <- c(Y0,Y1)
outcome
dat <- data.frame(treatment, outcome)
dat
t.test(dat$outcome~dat$treatment)
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,16,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
treatment <- c(rep(0,10), rep(1,10))
outcome <- c(Y0,Y1)
treatment
outcome
dat <- data.frame(treatment, outcome)
dat
t.test(dat$outcome~dat$treatment)
z <- c(rep(1,5),rep(0,5))
z
factorial(20) / (factorial(10)*factorial(10))
perms <- genperms(Z)
perms <- genperms(z)
perms
factorial(10) / (factorial(5)*factorial(5))
cat("There are", ncol(perms),"permutations")
probs <- genprobexact(z,blockvar=NULL)  # inputs imply equal-probability assignment
table(probs)
truedist <- gendist(Ys,perms=perms,X=NULL,Ypre=NULL, prob=probs, HT=FALSE)
truedist
hist(truedist)
mean(diff)
sum(truedist>=8.7)
table(truedist)
dispdist(truedist,0)
plot(density(truedist))
hist(truedist)
sum(truedist>=8.7)
rate <- sum(truedist>=8.7)
rate / ncols(perms)
rate / ncol(perms)
set.seed(1234567)   # random number seed, so that results are reproducible
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(Y0,Y1)
colMeans(Ys)
y0 <- c(10,15,20,20,10,15,15)
y1 <- c(15,15,30,15,20,15,30)
t <- y1-y0
dat <- data.frame(y0,y1)
dat
mean(t)
datM <- melt(dat)
datM
treat <- c(rep(0,7),rep(1,7))
treat
test <- data.frame(treat, value)
test <- data.frame(treat, datM$value)
test
test <- data.frame(treat, outcome=datM$value)
test
t.test(test$outcome~test$treat)
z  <- c(rep(1,2),rep(0,5))
z
factorial(7) / (factorial(2)*factorial(5))
perms <- genperms(z)
perms
probs <- genprobexact(z,blockvar=NULL)  # inputs imply equal-probability assignment
truedist <- gendist(dat,perms,Ypre=NULL,prob=probs,HT=FALSE)
dat
Ys <- data.frame(y0,y1)
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
z <- c(rep(1,10),rep(0,10))
y <- c(500,100,100,50,25,25,0,0,0,0,25,20,15,15,10,5,5,5,0,0)
dat <- data.frame(z,y)
dat
numiter <- 100000 # number of RI iterations. Use more for greater precision, fewer for greater speed.
set.seed(1234567) # set random number seed (so that results can be replicated)
factorial(20) / (factorial(10)*factorial(10))
denom <- var(z)
denom
tau <- cov(y,z)/denom
tau # treatment effect
tauRI <- rep(NA,numiter)
denom <- var(z)
denom
tau <- cov(y,z)/denom
tau # treatment effect
tauRI <- rep(NA,numiter)
for (i in 1:numiter) {
zri <- sample(z)
tauRI[i] <- cov(y,zri)/denom
if (i %% round(numiter/10) == 0) cat("Iteration",i,"of",numiter,"\n")
}
head(tauRI)
hist(tauRI,freq=TRUE,xlab="Estimated ATE",main=paste("Distribution of the Estimated ATE\n under the Sharp Null Hypothesis of No Treatment Effect\np = ",round(sum(tauRI >= tau)/numiter,3),", SE = ",round(sd(tauRI),3),sep=""),breaks=numiter,lwd=1)
lines(x=c(tau,tau),y=c(-1000,numiter*2),lwd=2,col="red",lty=2)
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,16,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
factorial(10) / (factorial(5)*factorial(5))
denom <- var(z)
z <- c(rep(1,5),rep(0,5))
z
sample(z)
numiter <- 252
diff <- Y1-Y0
diff
mean(diff)
treatment <- c(rep(0,10), rep(1,10))
treatment
outcome <- c(Y0,Y1)
outcome
dat <- data.frame(treatment, outcome)
dat
tau <- cov(outcome,treatment)/denom
denom <- var(treatment)
denom
tau <- cov(outcome,treatment)/denom
tau # treatment effect
tauRI <- rep(NA,numiter)
for (i in 1:numiter) {
zri <- sample(treatment)
tauRI[i] <- cov(outcome,zri)/denom
}
head(tauRI)
desc(tauRI)
describe(tauRI)
sum(tauRI>=8.7)
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,14,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
Y1 <- round(rnorm(10,13,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
Y1 <- round(rnorm(10,14,5),0)
Ys <- data.frame(Y0,Y1)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,14,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
set.seed(433)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,15,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
treatment <- c(rep(0,10), rep(1,10))
treatment
outcome <- c(Y0,Y1)
outcome
dat <- data.frame(treatment, outcome)
dat
factorial(20) / (factorial(10)*factorial(10))
numiter <- 100000
for (i in 1:numiter) {
zri <- sample(treatment)
tauRI[i] <- cov(outcome,zri)/denom
}
head(tauRI)
describe(tauRI)
sum(tauRI>=8.7)
mean(diff)
sum(tauRI>=6.2)
p <- rate/numiter
rate <- sum(tauRI>=6.2)
p <- rate/numiter
p
rate <- sum(tauRI>=tau)
p <- rate/numiter
p
tau <- cov(outcome,treatment)/denom
tau # treatment effect
rate <- sum(tauRI>=tau)
p <- rate/numiter
p
hist(tauRI)
hist(tauRI,freq=TRUE,xlab="Estimated ATE",main=paste("Distribution of the Estimated ATE\n under the Sharp Null Hypothesis of No Treatment Effect\np = ",round(sum(tauRI >= tau)/numiter,4),", SE = ",round(sd(tauRI),3),sep=""),breaks=numiter,lwd=1)
lines(x=c(tau,tau),y=c(-1000,numiter*2),lwd=2,col="red",lty=2)
hist(tauRI,freq=TRUE,xlab="Estimated ATE",main=paste("Distribution of the Estimated ATE\n under the Sharp Null Hypothesis of No Treatment Effect\np = ",round(sum(tauRI >= tau)/numiter,4),", SE = ",round(sd(tauRI),1),sep=""),breaks=numiter,lwd=1)
?lines
tau # treatment effect
hist(tauRI,freq=TRUE,xlab="Estimated ATE",main=paste("Distribution of the Estimated ATE\n under the Sharp Null Hypothesis of No Treatment Effect\np = ",round(sum(tauRI >= tau)/numiter,4),", SE = ",round(sd(tauRI),1),sep=""),breaks=numiter,lwd=1)
lines(x=c(tau,tau),y=c(000,numiter*2),lwd=2,col="red",lty=2)
lines(x=c(tau,tau),y=c(0,3000),lwd=2,col="red",lty=2)
hist(tauRI,freq=TRUE,xlab="Estimated ATE",main=paste("Distribution of the Estimated ATE\n under the Sharp Null Hypothesis of No Treatment Effect\np = ",round(sum(tauRI >= tau)/numiter,4),", SE = ",round(sd(tauRI),1),sep=""),breaks=numiter,lwd=1)
lines(x=c(tau,tau),y=c(0,3000),lwd=2,col="red",lty=2)
lines(x=c(tau,tau),y=c(0,5000),lwd=2,col="red",lty=2)
hist(tauRI)
hist(tauRI, breaks=numiter)
dat
t.test(outcome~treatment,var.equal=FALSE,alternative= "less")
t.test(outcome~treatment,var.equal=TRUE,alternative= "less")
out.lm <- lm(outcome~treatment)
summary(out.lm)
set.seed(1234567)   # random number seed, so that results are reproducible
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(Y0,Y1)
colMeans(Ys)
Z  <- c(rep(1,2),rep(0,5))
perms <- genperms(Z)
cat(ncol(perms)," = number of permutations")
probs <- genprobexact(Z,blockvar=NULL)  # inputs imply equal-probability assignment
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
dispdist(truedist,0)
sum(truedist>=5)
11/21
cat(ncol(perms)," = number of permutations")
y0 <- c(10,15,20,20,10,15,15)
y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(y0,y1)
z  <- c(rep(1,2),rep(0,5))
perms <- genperms(z)
cat("There are", ncol(perms),"permutations")
probs <- genprobexact(z,blockvar=NULL)  # inputs imply equal-probability assignment
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(Y0,Y1)
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
truedist
sum(truedist>=5)
rate <- sum(truedist>=5)
p <- rate/ncol(perms)
p
t <- Y1-Y0
mean(t)
datM <- melt(Ys)
datM
treat <- c(rep(0,7),rep(1,7))
treat
test <- data.frame(treat, outcome=datM$value)
test
t.test(test$outcome~test$treat)
t.test(test$outcome~test$treat, var.equal=t)
t.test(test$outcome~test$treat, var.equal=T)
t.test(test$outcome~test$treat, var.equal=F)
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,16,5),0)
Ys <- data.frame(Y0,Y1)
Ys
set.seed(43)
Y0 <- round(rnorm(10,10,2),0)
Y1 <- round(rnorm(10,16,5),0)
Ys <- data.frame(Y0,Y1)
Ys
colMeans(Ys)
diff <- Y1-Y0
diff
mean(diff)
z <- c(rep(0,5),rep(1,5))
z
factorial(10) / (factorial(5)*factorial(5))
perms <- genperms(z)
perms
cat("There are", ncol(perms),"permutations")
probs <- genprobexact(z,blockvar=NULL)  # inputs imply equal-probability assignment
probs
table(probs)
truedist <- gendist(Ys,perms=perms,X=NULL,Ypre=NULL, prob=probs, HT=FALSE)
truedist
Ys
diff
describe(truedist)
mean(diff)
z <- c(rep(1,5),rep(0,5))
truedist <- gendist(Ys,perms=perms,X=NULL,Ypre=NULL, prob=probs, HT=FALSE)
describe(truedist)
hist(truedist)
Ys
Y0 <- c(10,15,20,20,10,15,15)
Y1 <- c(15,15,30,15,20,15,30)
Ys <- data.frame(Y0,Y1)
colMeans(Ys)
Z  <- c(rep(1,2),rep(0,5))
perms <- genperms(Z)
probs <- genprobexact(Z,blockvar=NULL)  # inputs imply equal-probability assignment
truedist <- gendist(Ys,perms,Ypre=NULL,prob=probs,HT=FALSE)
dispdist(truedist,0)
mean(trudist)
mean(truedist)
rbind(truedist)
setwd("C:/Users/dkillian/Dropbox/personal/Coursera/Data science certificate/Machine learning/MachineLearningCourseProject/")
library(AppliedPredictiveModeling)
library(psych)
library(DescTools)
library(caret)
library(dplyr)
library(tidyr)
library(lubridate)
library(reshape2)
library(kernlab)
library(rattle)
library(ElemStatLearn)
library(ISLR)
library(stargazer)
options(digits=3, scipen=6)
theme_set(theme_bw() + theme(panel.grid.major.x=element_blank(),
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
plot.title=element_text(face="bold", size=18)) +
theme(axis.title=element_text(size=16)) +
theme(axis.text=element_text(size=14)))
test <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
trainNames <- data.frame(names(train))
trainNames
test <- test[,8:160]
train <- train[,8:160]
train <- select(train, classe, everything())
train[1:5,1:5]
Desc(train$classe, plotit=T)
train5 <- sample_n(train, 5000)
modFit5 <- train(classe~., method="rpart", data=train5)
modFit5
train1 <- sample_n(train, 5000)
train2 <- sample_n(train, 5000)
train3 <- sample_n(train, 5000)
train4 <- sample_n(train, 5000)
predict(modFit5, test)
View(test)
trainTrunc <- select(train, classe, stddev_roll_belt, var_roll_belt, var_total_accel_belt, avg_roll_belt, amplitude_pitch_belt, var_accel_dumbbell, min_roll_forearm, avg_pitch_forearm, avg_roll_dumbbell, amplitude_yaw_arm)
test2Trunc <- select(test, stddev_roll_belt, var_roll_belt, var_total_accel_belt, avg_roll_belt, amplitude_pitch_belt, var_accel_dumbbell, min_roll_forearm, avg_pitch_forearm, avg_roll_dumbbell, amplitude_yaw_arm)
View(test2Trunc)
View(trainNames)
View(train)
test <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
trainNames <- data.frame(names(train))
trainNames
test <- test[,8:160]
train <- train[,8:160]
train <- select(train, classe, everything())
train[1:5,1:5]
Desc(train$classe, plotit=T)
n <- lapply(train,is.na)
na <- lapply(n,mean)
na <- data.frame(na)
na <- t(na)
na
View(na)
train <- select(train, classe:skewness_yaw_belt, max_yaw_belt, min_yaw_belt, amplitude_yaw_belt, gyros_belt_x:total_accel_arm, gyros_arm_x:skewness_yaw_arm, roll_dumbbell:skewness_yaw_dumbbell, max_yaw_dumbbell, min_yaw_dumbbell, amplitude_yaw_dumbbell, total_accel_dumbbell, gyros_dumbbell_x:skewness_yaw_forearm, max_yaw_forearm, min_yaw_forearm, amplitude_yaw_forearm, total_accel_forearm, gyros_forearm_x:magnet_forearm_z)
test <- select(test, roll_belt:skewness_yaw_belt, max_yaw_belt, min_yaw_belt, amplitude_yaw_belt, gyros_belt_x:total_accel_arm, gyros_arm_x:skewness_yaw_arm, roll_dumbbell:skewness_yaw_dumbbell, max_yaw_dumbbell, min_yaw_dumbbell, amplitude_yaw_dumbbell, total_accel_dumbbell, gyros_dumbbell_x:skewness_yaw_forearm, max_yaw_forearm, min_yaw_forearm, amplitude_yaw_forearm, total_accel_forearm, gyros_forearm_x:magnet_forearm_z)
trainNames <- data.frame(names(train))
trainNames
View(train)
test <- read.csv("pml-testing.csv")
test <- read.csv("pml-testing.csv")
View(test)
train <- read.csv("pml-training.csv")
View(train)
View(train)
View(test)
train1 <- sample_n(train, 5000)
train5 <- sample_n(train, 5000)
modFit5 <- train(classe~., method="rpart", data=train5)
modFit5
trainNames <- data.frame(names(train))
trainNames
names(test)
test <- test[,2:159]
train <- train[,2:160]
names(test)
train <- select(train, classe, everything())
train[1:5,1:5]
names(train)
names(train)[2:159]==names(test)
predict(modFit5, test)
test <- read.csv("pml-testing.csv")
predict(modFit5, test[,-160])
View(train)
predict(modFit5, test)
test <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
names(test)
names(train)
test <- test[,2:159]
train <- train[,2:160]
train <- select(train, classe, everything())
names(train)[2:159]==names(test)
Desc(train$classe, plotit=T)
View(test)
View(train)
train <- select(train, classe:total_accel_belt, gyros_belt_x:total_accel_arm, gyros_arm_x:magnet_arm_z, roll_dumbbell:yaw_dumbbell)
test <- select(test, user_name:total_accel_belt, gyros_belt_x:total_accel_arm, gyros_arm_x:magnet_arm_z, roll_dumbbell:yaw_dumbbell)
View(train)
train1 <- sample_n(train, 5000)
train2 <- sample_n(train, 5000)
train3 <- sample_n(train, 5000)
train4 <- sample_n(train, 5000)
train5 <- sample_n(train, 5000)
treeFit <- train(classe~., method="rpart", data=train1)
treeFit
predict(treeFit, test)
PredtreeFit <- predict(treeFit, test)
treeFit <- train(classe~., method="rpart", data=train)
treeFit
treeFit1 <- train(classe~., method="rpart", data=train1)
PredtreeFit <- predict(treeFit, test)
PredtreeFit
PredtreeFit <- data.frame(tree=predict(treeFit, test))
PredtreeFit
PredtreeFit1 <- data.frame(tree1=predict(treeFit1, test))
View(PredtreeFit1)
View(PredtreeFit)
rfFit <- train(classe~., method="rf", data=train)
ldaFit2 <- train(classe~., method="lda", data=train2)
ldaFit2
PredldaFit2 <- data.frame(lda=predict(ldaFit2, test))
PredldaFit2
nbFit3 <- train(classe~., method="nb", data=train3)
warnings()
nbFit3
PrednbFit3 <- data.frame(nb=predict(nbFit3, test))
PrednbFit3
rfFit4 <- train(classe~., method="rf", data=train4)
res <- cbind(PredtreeFit, PredtreeFit1, PredldaFit2, PrednbFit3)
View(res)
PrednbFit3 <- data.frame(nb3=predict(nbFit3, test))
PredldaFit2 <- data.frame(lda2=predict(ldaFit2, test))
res <- cbind(PredtreeFit, PredtreeFit1, PredldaFit2, PrednbFit3)
write.csv(res, "Prediction results.csv", row.names=F)
ldaFit4 <- train(classe~., method="lda", preProcess="pca", data=train4)
ldaFit4
ldaFit <- train(classe~., method="lda", data=train)
ldaFit
ldaFitPCA <- train(classe~., method="lda", preProcess="pca", data=train)
ldaFitPCA
PredldaFit <- data.frame(lda=predict(ldaFit, test))
PredldaFit
PredldaFitPCA <- data.frame(ldapca=predict(ldaFitPCA, test))
PredldaFitPCA
res <- cbind(PredtreeFit, PredtreeFit1, PredldaFit2, PrednbFit3)
res <- cbind(PredtreeFit, PredtreeFit1, PredldaFit2, PrednbFit3, PredldaFit, PredldaFitPCA)
write.csv(res, "Prediction results.csv", row.names=F)
